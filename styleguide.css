/*
 * CSS RESET
 * inspired by https://github.com/vladocar/CSS-Mobile-Reset
 * */

html, body, button, h1, h2, h3, h4, h5, h6 {
    margin: 0;
    padding: 0;
    border: none;
}

body {
    background-color: #ebebeb;
    color: #4f4f4f;
    font-family: "Arial", "Helvetica";
    font-size: 14px;
    line-height: 19px;
    word-wrap: break-word;
    -webkit-text-size-adjust: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}

h1, h2, h3, h4, h5, h6 {
    font-size: 100%;
    font-weight: normal;
}

/* STARTING POINT */

/*
# Scaffolding

The mobile site is structured on a fluid gruid system, with the choice to display up to four columns.

Because mobile devices vary in screen dimensions, the grid will fill the width of the device up to 800px.

No modifiers

Styleguide 1.0.0
*/

/*
# Container

First rule of fight club: everything must be inside a *.container*.

The container regulates the size and form of the content. It also keeps everything centered, grounded and balanced.

    <div class="container">
        <!-- All content goes here -->
    </div>

No modifiers

Styleguide 1.1.0
*/
.container {
    width: 100%;
    margin: 0 auto;
    padding: 1px 0; /* collapsing margin fix */
    max-width: 800px;
    overflow-x: hidden;
    /* NOTE: I want to delete this, but does it break slide menu or anything else? */
    /* background-color: #fff; */
}

/*
# Surfaces

All content on the mobile site is displayed on a surface. Surfaces set the default margins and padding, and give the page its basic shape.

Surfaces must be used with the grid system (See section 1.3). In the examples below, each surface has a *&lt;div class="full"&gt;...&lt;/div&gt;* inside it. This is the HTML markup for a one-column layout with the grid system. Content may not be displayed correctly if the grid system is not used.

No modifiers

Styleguide 1.2.0
*/

/*
# Desk

This will have 6px padding on both sides, and its background will be the gray of the site.

Content on the desk includes the site footer, product filter buttons, or other <aside>-like elements.

    <div class="desk">
        <div class="full">This is the desk.</div>
    </div>

No modifiers

Styleguide 1.2.1
*/
.desk {
    margin: 4px 7px;
    color: #5a5a5a;
    text-shadow: 0 1px 0 #fff;
}

/*
# Paper

This surface is a rectangle with a white background and 6px padding on both sides.

Most of the content on the site will be on a paper surface.

    <div class="paper">
        <div class="full">This is paper.</div>
    </div>

No modifiers

Styleguide 1.2.2
*/
.paper {
    background-color: #fff;
    margin: 4px 10px;
    border: 1px solid #e7e7e7;
}

/*
# Well

The well is a surface inset into the desk.

This is useful for auxiliary content, like filter and sorting options.
When combined with CSS transitions, it looks like a panel in the desk
is opening.

    <div class="well">
        <div class="full">Don't fall in the well!</div>
    </div>

No modifiers

Styleguide 1.2.3
*/
.well {
    padding: 2px 7px;
    margin: 4px 0;
    color: #5a5a5a;
    text-shadow: 0 1px 0 #eee;
    border-top: 1px solid #fbfbfb;
    border-bottom: 1px solid #fff;
    background-color: #d5d5d5;
    -webkit-box-shadow:
        inset 0 3px 4px -2px #aaa,
        inset 0 -7px 8px -8px #bbb;
    box-shadow:
        inset 0 3px 4px -2px #aaa,
        inset 0 -7px 8px -8px #bbb;
}

/*
# Carbon

This fills the screen and has a darker background than the desk. 
Use it to emphasize content.

    <div class="carbon">
        <div class="full">Pay attention.</div>
    </div>

No modifiers

Styleguide 1.2.4
*/
.carbon {
    padding: 6px 7px;
    margin: 0;
    color: #5a5a5a;
    text-shadow: 0 1px 0 #eee;
    background-color: #efefef;
}

/*
# Surface Spacing

All the surfaces have a left and right padding. However, *.paper* has
additional padding because it has a border.

There are times when you want text in neighboring surfaces to have the same
left and right padding. Add the class *z-content* to the surface element to
make sure text lines up on all surfaces.

This can be used on any surface, but it won't have any effect on *.paper*.

    <div class="carbon">
        <p>Without z-content, it looks like this</p>
    </div>
    <div class="desk">
        <p>Without z-content, it looks like this</p>
    </div>
    <div class="well">
        <p>Without z-content, it looks like this</p>
    </div>
    <div class="paper">
        <p>Without z-content, it looks like this</p>
    </div>

    <div class="carbon z-content">
        <p>With z-content, it looks like this</p>
    </div>
    <div class="desk z-content">
        <p>With z-content, it looks like this</p>
    </div>
    <div class="well z-content">
        <p>With z-content, it looks like this</p>
    </div>
    <div class="paper z-content">
        <p>With z-content, it looks like this</p>
    </div>

No modifiers

Styleguide 1.2.5
*/
.z-content {
    padding-left: 8px;
    padding-right: 8px;
}

.well.z-content,
.carbon.z-content {
    padding-left: 15px;
    padding-right: 15px;
}

/*
# Grid System

The mobile site supports up to four fluid columns. The columns will fill the width of the device up to 800px. This covers all handheld devices and many small tablets.

To use the grid, create a *div* and set its class to one of the following divisions:

- full
- half
- two-thirds
- one-third
- three-quarters
- one-quarter

## Nesting

Grid elements should not be nested. 

## Usage

All content should be in a grid element. Unexpected things may happen if content is placed outside of a grid element.

## Important Note

This grid system does not use floats. This is to reduce the amount of markup required on the mobile site, and to reduce reflow/repaint complexity. 

Because of this, IT IS REQUIRED that there is whitespace between the grid elements. In other words, *&lt;div class="half"&gt;...&lt;/div&gt;&lt;div class="half"&gt;...&lt;/div&gt;* is BAD. *&lt;div class="half"&gt;...&lt;/div&gt; &lt;div class="half"&gt;...&lt;/div&gt;* is GOOD

It is enough to have a line break between grid elements. This notice is important if the HTML is minimized at some point.

    <div class="full">One column</div>
    <div class="half">1 of 2</div> <div class="half">2 of 2</div>
    <div class="one-third">1 of 3</div> <div class="one-third">2 of 3</div> <div class="one-third">3 of 3</div>
    <div class="one-third">1/3</div> <div class="two-thirds">2/3</div>
    <div class="one-quarter">1 of 4</div> <div class="one-quarter">2 of 4</div> <div class="one-quarter">3 of 4</div> <div class="one-quarter">4 of 4</div>
    <div class="one-quarter">1/4</div> <div class="three-quarters">3/4</div>

No modifiers

Styleguide 1.3.0
*/
.full, .three-quarters, .two-thirds, .half, .one-third, .one-quarter {
    display: inline-block;
    vertical-align: top;
    margin: 0 -4px 0 0; /* Android inline-block whitespace fix */
    /* padding: 2px 0; */
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
}

.full {
    width: 100%;
}

.three-quarters {
    width: 75%;
}

.two-thirds {
    width: 66.66666%;
}

.half {
    width: 50%;
}

.one-third {
    width: 33.3333%;
}

.one-quarter {
    width: 25%;
}

/* INPUT */

textarea {
    overflow: auto;
    vertical-align: top;
    border-radius: 4px;
    resize: none;
}

body:not(.android-41) select {
    height: auto;
    background-color: #ffffff;
    border: 1px solid #cccccc;
}

/*
# Buttons

Use the standard *.z-btn* for form actions and button link actions. These are heavily used in the checkout module and throughout the site.

Buttons can be used with *&lt;a&gt;&lt;/a&gt;*, *&lt;button&gt;&lt;/button&gt;*, or *&lt;input type="submit"&gt;*. Unexpected and BAD things can happen if you use any other elements for button styling.

:active - Shows the button pressed down.
.disabled - Grays and dims the button to indicate that it cannot be used.

Styleguide 2.0.0
*/

/*
# Button Types

There are four types of buttons in web mobile:

- Button: This is the default button
- Primary: This is used for CTAs
- Attention: Not sure where this is used
- Muted: To de-emphasize less important actions

Each type has three states:

- Default
- Active
- Disabled

Buttons can either fit their content, or be block-level.


No Modifiers

Styleguide 2.1.0
*/

/*
# Default Button

Your good old standard button. Add the class *.z-btn* to a *&lt;button&gt;*, *&lt;a&gt;* or *&lt;input&gt;* tag.

    <div class="full">
        <button class="z-btn">Button (button.z-btn)</button>
    </div>
    <div class="full">
        <a href="#" class="z-btn">Button (a.z-btn)</a>
    </div>
    <div class="full">
        <input type="submit" value="Button (input.z-btn)" class="z-btn" />
    </div>
    <div class="full">
        <button class="z-btn active">Active Button</button>
    </div>
    <div class="full">
        <button class="z-btn disabled">Disabled</button>
    </div>

:active - Shows the button pressed down.
.disabled - Grays and dims the button to indicate that it cannot be used.

Styleguide 2.1.1
*/
.z-btn {
    display: inline-block;
    padding: 8px 12px;
    width: auto;
    margin: 0 0 4px 0;
    color: #333;
    text-align: center;
    vertical-align: middle;
    text-decoration: none;
    word-wrap: break-word;
    background-color: #E5E5E5;
    -webkit-border-radius: 0;
    text-transform: uppercase;
    border-radius: 0;
}


.z-btn.active,
.z-btn:active {
    background-color: #FFFFFF;
    color: #bcbcbc;
}

.z-btn.disabled,
.z-btn[disabled] {
    cursor: default;
    background-color: #FFFFFF;
    color: #bcbcbc;
}

/*
# Primary Button

For the main form action. Usually used when making a decision. Add the classes *.z-btn .z-btn-primary*.

    <div class="full">
        <button class="z-btn z-btn-primary">Button (button.z-btn)</button>
    </div>
    <div class="full">
        <a href="#" class="z-btn z-btn-primary">Button (a.z-btn)</a>
    </div>
    <div class="full">
        <input type="submit" value="Button (input.z-btn)" class="z-btn z-btn-primary" />
    </div>
    <div class="full">
        <button class="z-btn z-btn-primary active">Active</button>
    </div>
    <div class="full">
        <button class="z-btn z-btn-primary disabled">Disabled</button>
    </div>

:active - Shows the button pressed down.
.disabled - Grays and dims the button to indicate that it cannot be used.

Styleguide 2.1.2
*/
.z-btn-primary {
    color: #fff;
    background-color: #000;
    border: 0;
}

.z-btn-primary:active,
.z-btn-primary.active {
    color: #AAAAAA;
    background-color: #000000;
}

.z-btn-primary.disabled,
.z-btn-primary[disabled] {
    color: #A5A5A5;
    background-color: #6D6D6D;
}

/**
# Attention buttons

Use these to emphasize an action. Works best when used together with
other kinds of buttons.

Use the class *z-btn-attn* along with *z-btn*.

    <div class="full">
        <button class="z-btn z-btn-attn">Attention Button</button>
        <button class="z-btn">Regular Button</button>
    </div>

:active
:disabled

Styleguide 2.1.3
*/
.z-btn-attn {
  color: #fff;
  background-color: #238189;
  font-size: 15px;
}

/**
# Muted buttons

Use these to de-emphasize an action. Works best when used together with
other kinds of buttons.

Use the class *z-btn-muted* along with *z-btn*.

    <div class="full">
        <button class="z-btn z-btn-muted">Muted Button</button>
        <button class="z-btn">Regular Button</button>
    </div>

:active
:disabled

Styleguide 2.1.4
*/
.z-btn-muted {
    color: #797979;
    background-color: #f5f5f5;
    background-image: -moz-linear-gradient(top, #ffffff, #ebebeb);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ffffff), to(#ebebeb));
    background-image: -webkit-linear-gradient(top, #ffffff, #ebebeb);
    background-image: -o-linear-gradient(top, #ffffff, #ebebeb);
    background-image: linear-gradient(to bottom, #ffffff, #ebebeb);
}


input:not[type="checkbox"],
input:not[type="radio"],
textarea {
    -webkit-appearance: none;
}

/*
# Block-level Buttons

Sometimes buttons are block level. These are generally for important form actions.
To use, add *.z-btn-block* to an existing button.

    <div class="full">
        <button class="z-btn z-btn-block">Do something important</button>
    </div>
    <div class="full">
        <a class="z-btn z-btn-block">Do something important</a>
    </div>
    <div class="half">
        <input type="submit" class="z-btn z-btn-block" value="Half Button">
    </div>
    <div class="half">
        <button class="z-btn z-btn-block disabled">Disabled</button>
    </div>

No modifiers

Styleguide 2.2.0
*/
.z-btn-block {
    display: block;
    width: 100%;
    max-width: 400px;
    padding-right: 0;
    padding-left: 0;
    margin: 0 auto;
    font-size: 16px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
    min-height: 1em;
}

/* Button Sizes */

/*
# Button sizes

There are times when a button needs to be emphasized or deemphasized.

Use *.z-btn-slim* to slim down the button. Use *z-btn-thick* to fatten it up.

    <div class="full">
        <h4>Inline</h4>
        <button class="z-btn z-btn-slim">Slim</button>
        <button class="z-btn">Reg</button>
        <button class="z-btn z-btn-thick">Thick</button>
    </div>
    <div class="full">
        <h4>Block</h4>
        <button class="z-btn z-btn-block z-btn-slim">Slim</button>
        <button class="z-btn z-btn-block">Reg</button>
        <button class="z-btn z-btn-block z-btn-thick">Thick</button>
    </div>

No modifiers

Styleguide 2.3.0
*/
.z-btn-slim {
    padding: 3px 12px;
}

.z-btn-thick {
    padding: 10px 12px;
    font-size: 22px;
}

/*
# Inline Buttons

Buttons are already inline by default, but they don't have user-friendly
spacing.

Wrap buttons with the class *inline-group* to semantically group them.

    <div class="full">
        <div class="inline-group">
            <button class="z-btn">Opt 1</button>
            <button class="z-btn">Opt 2</button>
            <button class="z-btn">Opt 3</button>
        </div>
        <div class="inline-group">
            <select>
                <option>Jan</option>
                <option>Feb</option>
            </select>
            <select>
                <option>1</option>
                <option>2</option>
            </select>
            <select>
                <option>1992</option>
                <option>1993</option>
            </select>
        </div>
    </div>

No modifiers

Styleguide 2.4.0
*/
.inline-group select:not(:last-child),
.inline-group input:not(:last-child),
.inline-group label,
.inline-group .z-btn:not(:last-child) {
    display: inline-block;
    margin-right: 4px;
}

/*
# Hypertext links

Styles your anchor tags like a traditional hypertext link.

    <div class="full">
        <a class="z-link" href="#">This is a link</a>
    </div>

No modifiers

Styleguide 2.5.0
*/
.z-link {
    text-decoration: underline;
}

/*
# Forms

Forms are a major part of the checkout process, and it plays a large role in other parts of the site. Use the following styles to Zalorify your forms.

For the purposes of this styleguide, *&lt;input type="submit"&gt;* is treated as a button. See the buttons section.

:active

Styleguide 3.0.0
*/
input:not[type="submit"], 
textarea {
    width: 200px;
    max-width: 100%;
}

.z-input-block {
    display: block;
    width: 100%;
    min-height: 30px;
    padding-right: 0;
    padding-left: 0;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
}

/*
# Text Input

Your trusty text input. Usually spotted near forms.

    <div class="full">
        <input type="text" placeholder="What's your name?">
        <input type="password" placeholder="Secret Password">
        <input type="email" placeholder="Email">
        <input type="tel" placeholder="1234-5678">
    </div>

:focus

Styleguide 3.1.0
*/

/*
# Select

Oh, so many options!

NOTE: Android 4.1 has a bug that renders HTML selects incorrectly if they have
styles attached. To bypass this, set the class *android-41* on the *body*.

    <div class="full">
        <select>
            <option>To be</option>
            <option>Not to be</option>
        </select>
    </div>

:focus

Styleguide 3.2.0
*/
body:not(.android-41) select,
textarea,
input[type="text"],
input[type="password"],
input[type="email"],
input[type="tel"] {
    display: inline-block;
    min-height: 22px;
    padding: 4px 6px;
    margin-bottom: 4px;
    font-size: 15px;
    line-height: 25px;
    vertical-align: middle;
    box-sizing: border-box;
    -o-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
}

/*
# Textarea

Fill it in, fill it in.

    <div class="full">
        <textarea placeholder="Tell me about yourself..."></textarea>
    </div>

:focus

Styleguide 3.3.0
*/
textarea,
input[type="text"],
input[type="password"],
input[type="email"],
input[type="tel"] {
    background-color: #fff;
    border: 1px solid #ccc;
    -webkit-appearance: none;
    -webkit-box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
}

textarea:focus,
input[type="text"]:focus,
input[type="password"]:focus,
input[type="email"]:focus,
input[type="tel"]:focus {
    border-color: #00b09f;
    outline: 0;
}

select:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

/*
# Checkboxes

Checkboxes are typically created inside labels

    <div class="full">
        <label><input type="checkbox"> Send me a newsletter</label>
    </div>

No modifiers

Styleguide 3.4.0
*/

/*
# Radio buttons

These are also created inside labels

    <div class="full">
        <label><input name="vacation" type="radio"> Go to Disneyland</label>
        <label><input name="vacation" type="radio"> Go to Universal Studios</label>
    </div>

No modifiers

Styleguide 3.5.0
*/
input[type="radio"],
input[type="checkbox"] {
    width: auto;
    margin: -2px 3px 0 0;
    line-height: normal;
}


/*
# Labels

Labels can be used with any form element. Just precede the element with the 
label. Use the *for* attribute to link the label to its form element.

Checkboxes and radio buttons are the only form elements that are placed inside 
the label.

    <div class="full">
        <label for="nickname">Nickname</label>
        <input type="text" id="nickname">
    </div>
    <div class="full">
        <label><input type="checkbox"> I love labels</label>
    </div>

No modifiers

Styleguide 3.6.0
*/
label {
    display: block;
    margin-bottom: 0;
}

/*
# Block level inputs

Use *.z-input-block* to set the following elements as block-level:

- input[type="text"]
- input[type="password"]
- input[type="email"]
- input[type="tel"]
- select
- textarea

## Example

    <div class="full">
        <input type="text" class="z-input-block" placeholder="Block text input">
        <input type="password" class="z-input-block" placeholder="Block password input">
        <input type="email" class="z-input-block" placeholder="Block email input">
        <input type="tel" class="z-input-block" placeholder="Block tel input">
        <select class="z-input-block"><option>Block select</option></select>
        <textarea class="z-input-block" placeholder="Block textarea"></textarea>
    </div>

No modifiers

Styleguide 3.7.0
*/

/*
# Appended input

Sometimes, a text input is paired with a button to initiate a form action, 
such as a search. Or sometimes, a static element is appended to a text input 
to represent a fixed aspect of the input. For example. when entering a 
dollar amount, The user may enter "32", and the element appended may show 
".00".

To attach an element to a text input, both the element and the input must be 
wrapped in an element with the class *z-input-append*. In addition, the appended 
element must have the class *add-on*.

<strong>BROWSER BUG</strong>: Inputs on Firefox mobile ~v20 do not respond to line-height.
The only *add-on* element that works on Firefox mobile is *&lt;button&gt;*.
So although any element works fine on non-Firefox browsers, use only *&lt;button&gt;*
on the live site.

<strong>NOTE:</strong> The examples below will overflow from its container. 
For the purposes of this guide, this is normal and is not a bug.

    <div class="full">
        <div class="z-input-append">
            <input type="text">
            <input type="submit" class="z-btn add-on" value="Search">
        </div>
        <div class="z-input-append">
            <input type="text" placeholder="$24">
            <div class="add-on">.00</div>
        </div>
    </div>

No modifiers

Styleguide 3.8.0
*/
.z-input-append {
    display: inline-block;
    white-space: nowrap;
    vertical-align: middle;
}

.z-input-append input[type="text"],
.z-input-append input[type="email"],
.z-input-append input[type="tel"] {
    display: inline-block;
    margin-top: 1.616161px;
    margin-right: 0;
    border-left: 1px solid #ccc;
    border-top: 1px solid #ccc;
    border-bottom: 1px solid #ccc;
    border-right: none;
    min-height: 20px; /* Firefox input bug fix. All elements except <button> work */
}

.z-input-append .add-on {
    display: inline-block;
    vertical-align: top;
    margin-top: 1.616161px;
    margin-left: -4px;
    padding: 4px 8px;
    border-top: 1px solid #ccc;
    border-right: 1px solid #ccc;
    border-bottom: 1px solid #ccc;
    line-height: 20px;
}

/*
# Block Level Appended input

To make an appended input group block-level, the structure will change a bit 
from the above example. It must follow these rules:

- In addition to *z-input-append*, the class *z-input-block-append* must be added 
to the wrapping element.
- The appended element must be placed **before** the text input in the HTML markup.
- The text input must be wrapped in an element with the class *z-input*.

## Example

    <div class="full">
        <div class="z-input-append z-input-block-append">
            <input type="submit" class="z-btn add-on" value="Search">
            <div class="z-input">
                <input type="text">
            </div>
        </div>
        <div class="z-input-append z-input-block-append">
            <div class="add-on">.00</div>
            <div class="z-input">
                <input type="text" placeholder="$24">
            </div>
        </div>
    </div>

No modifiers

Styleguide 3.8.1
*/
.z-input-block-append {
    width: 100%;
}

.z-input-block-append:before,
.z-input-block-append:after {
    content: " ";
    display: table;
}

.z-input-block-append:after {
    clear: both;
}

.z-input-block-append .z-input {
    overflow: hidden;
    padding-right: 3px;
}

.z-input-block-append .add-on {
    float: right;
}

.z-input-block-append .z-input input {
    width: 100%;
}

/*
# Inline Groups

Wrap inputs with the class *inline-group* to semantically group them.

    <div class="full">
        <div class="inline-group">
            <label>Name</label>
            <input type="text" style="width: 100px;">
        </div>
        <hr>
        <div class="inline-group">
            <select>
                <option>Jan</option>
                <option>Feb</option>
            </select>
            <select>
                <option>1</option>
                <option>2</option>
            </select>
            <select>
                <option>1992</option>
                <option>1993</option>
            </select>
        </div>
    </div>

No modifiers

Styleguide 3.9.0
*/

/*
# Grid Content Positioning

The content inside the grid cell can be positioned by adding any of the following classes:

- .align-left - This is the default alignment
- .align-center
- .align-right

This works for any block level element.

    <div class="full align-left">
        <p>Aligned left.</p>
        <p>This is default.</p>
        <p>Not impressive.</p>
    </div>
    <div class="full align-center">
        <p>This must be important.</p>
        <p>It's in the middle!</p>
    </div>
    <div class="full align-right">
        <p>Now we're talking.</p>
        <p>Position your elements anywhere</p>
    </div>
    <div class="one-third align-left">Left</div> <div class="one-third align-center">Center</div> <div class="one-third align-right">Right</div>

No modifiers

Styleguide 1.3.1
*/
.align-left {
    text-align: left;
}

.align-center {
    text-align: center;
}

.align-right {
    text-align: right;
}

/*
# Grid Cell Positioning

The grid cell itself can be positioned vertically. This works when there is 
more than one column.

- .align-top - This is the default alignment
- .align-middle
- .align-bottom

## Example

    <div class="one-third align-center align-top">
        <p>Fill it up</p>
        <p>Fill it up</p>
    </div>
    <div class="one-third align-center align-middle">
        <p>Fill it up</p>
        <p>Fill it up</p>
        <p>Fill it up</p>
        <p>Fill it up</p>
        <p>Fill it up</p>
        <p>Fill it up</p>
    </div>
    <div class="one-third align-right align-bottom">
        <p>Fill it up</p>
        <p>Fill it up</p>
    </div>

No modifiers

Styleguide 1.3.2
*/
.align-top {
    vertical-align: top;
}

.align-middle {
    vertical-align: middle;
}

.align-bottom {
    vertical-align: bottom;
}

/*
# Spacing

The grid elements have very little vertical space between them.

To increase the vertical space between elements, you can use *.thick* grid
elements, or give them some *.breathing-room*. *.breathing-room* gives twice
as much space as *.thick*. Be aware that *.thick* uses padding, and *breathing-room*
uses margins. Keep this in mind because this difference has implications on the design.

    <div class="paper">
        <div class="full thick">
            <div>Hello</div>
        </div>
        <div class="full thick">
            <div>Bonjour</div>
        </div>
        <hr>
        <div class="full breathing-room">
            <div>Hello</div>
        </div>
        <div class="full breathing-room">
            <div>Bonjour</div>
        </div>
    </div>

No modifiers

Styleguide 1.3.3
*/
.breathing-room {
    margin-top: 20px !important;
    margin-bottom: 20px !important;
}

.inner-breathing-room {
    padding-top: 20px;
    padding-bottom: 20px;
}

.thick {
    padding-top: 10px;
    padding-bottom: 10px;
}

/*
# Table Layout

On a shopping site, it's common to see data layed out as a table. This can be
achieved with the following classes:

- *.table*
- *.row*
- *.cell*

These tables can be used on any element.

NOTE: Unfortunately, table elements cannot be aligned with the alignment
classes. The only way to satisfactorily align them is to give them full width.
Set the class *table-full* on the table element to be able to align it.

    <div class="paper">
        <div class="table">
            <p class="row">
                <span class="cell">One Label</span>
                <span class="cell">Value</span>
            </p>
            <p class="row">
                <span class="cell">Another Label&nbsp;</span>
                <span class="cell">Value</span>
            </p>
        </div>
    </div>
    <!-- Different structure, same table -->
    <div class="paper">
        <section class="table">
            <div class="row">
                <p class="cell">A third label&nbsp;</p>
                <p class="cell">Value</p>
            </div>
            <div class="row">
                <p class="cell">Last Label</p>
                <p class="cell">Value</p>
            </div>
        </section>
    </div>
    <!-- Aligned right -->
    <div class="paper align-right">
        <section class="table table-full">
            <div class="row">
                <p class="cell">A third label&nbsp;</p>
                <p class="cell">Value</p>
            </div>
            <div class="row">
                <p class="cell">Last Label</p>
                <p class="cell">Value</p>
            </div>
        </section>
    </div>

No modifiers

Styleguide 1.4.0
*/
.table {
    display: table;
    table-layout: fixed;
}

.row {
    display: table-row;
}

.cell {
    display: table-cell;
    word-break: break-word;
}

.cell:not(:last-child) {
    padding-right: 6px;
}

.table-full {
    width: 100%;
}

/* TYPOGRAPHY */

.h1 {
    font-size: 28px;
}

.h2 {
    font-size: 24px;
}

.h3 {
    font-size: 20px;
}

.h4 {
    font-size: 16px;
}

.h5 {
    font-size: 14px;
}

.h6 {
    font-size: 12px;
}

/*
# Typography

Text on mobile devices has a much more limited range than on desktop.

This section introduces semantic typography optimized for legibility on a mobile 
device.

No modifiers

Styleguide 4.0.0
*/

/*
# Headings

The traditional HTML headings are used on ZALORA for SEO purposes and are left
unstyled.

Therefore use the following classes to style headings: *.h1* through *.h6*.

    <h1 class="h1">Heading 1</h1>
    <h2 class="h2">Heading 2</h2>
    <h3 class="h3">Heading 3</h3>
    <h4 class="h4">Heading 4</h4>
    <h5 class="h5">Heading 5</h5>
    <h6 class="h6">Heading 6</h6>

No modifiers

Styleguide 4.1.0
*/
.h1, .h2, .h3, .h4, .h5, .h6 {
    margin: 4px 0 6px 0;
    font-family: inherit;
    font-weight: bold;
    line-height: 20px;
    color: inherit;
}

.h1, .h2 {
    line-height: 30px;
}

.h3 {
    line-height: 24px;
}


/*
# Sections

Zalora is built with HTML 5, and content should be divided with *&lt;section&gt;* tags.

Sections have a bottom margin that space them from their sibling elements. 
Use *&lt;section&gt;*s over grid elements for semantically dividing content. 
Grid elements are useful when you want to split your content into columns.

    <div class="full">
        <section>
            This is one section here
        </section>
        <section>
            This is another.
        </section>
    </div>
    <div class="half">
        <section>
            This is one section in column one.
        </section>
        <section>
            This is another right below.
        </section>
    </div>
    <div class="half">
        <section>
            Here we are in column two.
        </section>
        <section>
            And another one below.
        </section>
    </div>

No modifiers

Styleguide 4.2.0
*/
section {
    margin-bottom: 12px;
}

/*
# Body copy

Zalora mobile's default *font-size* is **14px**, with a *line-height* of **19px**. This is applied to the *&lt;body&gt;* and all paragraphs. Paragraphs *&lt;p&gt;* and *&lt;section&gt;*s receive a bottom margin of half their line-height by default.

    <div class="full">
        <p>Praesent enim nunc, bibendum a interdum sed, vestibulum eget eros. Pellentesque eleifend enim eu urna tristique consequat. Pellentesque ut nisi in tellus placerat lobortis. Curabitur aliquet blandit turpis, a suscipit augue porta ac. Sed sed ipsum turpis.</p>
        <p>Cras tortor sapien, volutpat a lacinia in, blandit ac velit. Etiam dictum odio lacus, eget porta nisl. Fusce condimentum euismod fermentum. Sed nec mauris erat, ac varius mi.</p>
    </div>

No modifiers

Styleguide 4.3.0
*/
p {
    margin: 4px 0 6px 0;
}

/*
# Font Size

There are five available text sizes on the mobile site:

- Extra Small  *.font-xsmall*
- Small        *.font-small*
- Regular
- Large        *.font-large*
- Extra Large  *.font-xlarge*

No special markup is needed for regular text.

If you apply these classes to a wrapper element, all inner elements except 
headings and buttons will respond. For buttons, use the button size classes.

    <div class="full">
        <section>
            <p class="font-xlarge">Extra large text</p>
            <p class="font-large">Large text</p>
            <p>Regular text</p>
            <p class="font-small">Small text</p>
            <p class="font-xsmall">Extra small text</p>
        </section>
    </div>


No modifiers

Styleguide 4.3.1
*/
.font-xlarge {
    font-size: 16px;
}

.font-large {
    font-size: 15px;
}

.font-small {
    font-size: 12px;
}

.font-xsmall {
    font-size: 11px;
}


/*
# Text Emphasis - Style

Emphasize text by making it italic with *&lt;em&gt;*, or bold with *&lt;strong&gt;*.

Or change the case with *text-upper* or *text-lower*.

    <p><em>This is italic text</em></p>
    <p><strong>This is bold text</strong></p>
    <p class="text-upper">This text is in uppercase</p>
    <p class="text-lower">This text is in lowercase</p>
    <p class="text-2em">This text is vertically aligned in the middle with 0.5em padding in top and bottom</p>

No modifiers

Styleguide 4.4.0
*/
em {
    font-style: italic;
}

.text-upper {
    text-transform: uppercase;
}

.text-lower {
    text-transform: lowercase;
}

.text-capitalize {
    text-transform: capitalize;
}

.text-2em {
    line-height: 2em;
}
/*
# Text Emphasis - Color

Use color to convey meaning about the content.

    <p class="text-muted">This is muted text</p>
    <p class="text-muted-2">This is muted text 2</p>
    <p class="text-muted-3">This is muted text 3</p>
    <p class="text-red">This is red text</p>
    <p class="text-wine">This is wine text</p>
    <p class="text-white">This is white text</p>
    <p class="text-gray">This is gray text</p>
    <p class="text-black">This is black text</p>
    <p class="text-success">This is success text</p>
    <p class="text-info">This is informational text</p>
    <p class="text-attention">This is important text</p>
    <p class="text-attention-inverted">This is important text inverted</p>

No modifiers

Styleguide 4.4.1
*/
.text-muted {
    color: #767676;
}

.text-muted-2 {
    color: #6c6c6c;
}

.text-muted-3 {
    color: #888888;
}

.text-red {
    color: #B01919;
}

.text-wine {
    color: #890000;
}

.text-white {
    color: #FFF;
}

.text-gray {
    color: #313131;
}

.text-black {
    color: #000;
}

.text-info {
    color: #313131;
}

.text-success {
    color: #147820;
}

.text-attention {
    color: #00b09f;
}

.text-attention-inverted {
    color: #43ffec;
}

/*
# Thematic Break

Use *&lt;hr&gt;* to represent a thematic break between content.

    <section>
        <p>Here is some content</p>
    </section>
    <hr>
    <section>
        <p>Here is some other content</p>
    </section>

No modifiers

Styleguide 4.5.0
*/
hr {
    border: none;
    height: 0;
    margin: 8px 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.4);
}

a { color: #333333; text-decoration: none; }
a:focus { outline: thin dotted; }
a:hover, a:active { outline: 0; }

ul, ol { list-style: none; list-style-image: none; margin: 0; padding: 0; }

select { margin-bottom: 4px; }

/* ZALORA COMPONENTS */

/* TODO document */
.section-title {
    border-bottom: 1px solid #dfdfdf;
    margin-bottom: 6px;
}

/* TODO document */
.clear:before,
.clear:after {
    content: " ";
    display: table;
}

.clear:after {
    clear: both;
}

.hidden { display: none !important; }

/* TODO document */
.box-attn {
    border: 2px solid #00b09f;
    padding: 4px 6px;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

/* TODO document */
/* It's currently using this SVG for the circle: */
/* <?xml version="1.0" encoding="utf-8"?> */
/* <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"> */
/* <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" */
/*      width="50px" height="50px"> */
/* <circle cx="25" cy="25" r="25" fill="#4DCDA4"/> */
/* <rect fill="none" width="50" height="50"/> */
/* <polygon fill="#FFFFFF" points="35.3485,11.9985 22.1735,27.1395 13.9985,20.4975 8.999,27.1395 22.1735,38.4955 40.995,17.6765"/> */
/* </svg> */
/* Encode at http://www.mobilefish.com/services/base64/base64.php */
.success-well {
    border-top: 1px solid #238189;
    border-bottom: 1px solid #238189;
    color: #238189;
    margin: 6px 0;
    padding: 16px 0 0 65px;
    background: url('../../images/local_mobile/check.png') no-repeat;
    background-position: 20px 15px;
    background-color: rgba(35,129,137, 0.2);
    min-height: 44px;
}

.error-well {
    border-top: 1px solid #238189;
    border-bottom: 1px solid #238189;
    color: #238189;
    margin: 6px 0;
    padding: 8px 0 8px 65px;
    background: url('../../images/local_mobile/exclamation.png') no-repeat;
    background-position: 30px 15px;
    background-color: rgba(35,129,137, 0.2);
    min-height: 44px;
}

/* PURE SPACING */

/* TODO document */
.lPadSmall {
    padding-left: 6px !important;
}

/* TODO document */
.rPadSmall {
    padding-right: 6px !important;
}

/* TODO document */
.lPadLarge {
    padding-left: 18px !important;
}

/* TODO document */
.rPadLarge {
    padding-right: 18px !important;
}

